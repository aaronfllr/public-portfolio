/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/unxhr";
exports.ids = ["vendor-chunks/unxhr"];
exports.modules = {

/***/ "(rsc)/./node_modules/unxhr/lib/XMLHttpRequest.js":
/*!**************************************************!*\
  !*** ./node_modules/unxhr/lib/XMLHttpRequest.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Wrapper for built-in http.js to emulate the browser XMLHttpRequest object.\n *\n * This can be used with JS designed for browsers to improve reuse of code and\n * allow the use of existing libraries.\n *\n * Usage: include(\"XMLHttpRequest.js\") and use XMLHttpRequest per W3C specs.\n *\n * @author Dan DeFelippi <dan@driverdan.com>\n * @contributor David Ellis <d.f.ellis@ieee.org>\n * @contributor Guillaume Grossetie <ggrossetie@yuzutech.fr>\n * @contributor David Jencks <djencks@apache.org>\n * @license MIT\n */\nconst Url = __webpack_require__(/*! url */ \"url\")\nconst fs = __webpack_require__(/*! fs */ \"fs\")\nconst ospath = __webpack_require__(/*! path */ \"path\")\n\n// 100 MB\nconst DEFAULT_MAX_BUFFER = 1000 * 1000 * 100\n\nexports.XMLHttpRequest = function () {\n  'use strict'\n\n  /**\n   * Private variables\n   */\n  const self = this\n  const http = __webpack_require__(/*! http */ \"http\")\n  const https = __webpack_require__(/*! https */ \"https\")\n\n  // Holds http.js objects\n  let request\n  let response\n\n  // Request settings\n  let settings = {}\n\n  // Disable header blacklist.\n  // Not part of XHR specs.\n  let disableHeaderCheck = false\n\n  // Set some default headers\n  const defaultHeaders = {\n    'User-Agent': 'node-XMLHttpRequest',\n    Accept: '*/*'\n  }\n\n  let headers = {}\n  const headersCase = {}\n\n  // These headers are not user setable.\n  // The following are allowed but banned in the spec:\n  // * user-agent\n  const forbiddenRequestHeaders = [\n    'accept-charset',\n    'accept-encoding',\n    'access-control-request-headers',\n    'access-control-request-method',\n    'connection',\n    'content-length',\n    'content-transfer-encoding',\n    'cookie',\n    'cookie2',\n    'date',\n    'expect',\n    'host',\n    'keep-alive',\n    'origin',\n    'referer',\n    'te',\n    'trailer',\n    'transfer-encoding',\n    'upgrade',\n    'via'\n  ]\n\n  // These request methods are not allowed\n  const forbiddenRequestMethods = [\n    'TRACE',\n    'TRACK',\n    'CONNECT'\n  ]\n\n  // Send flag\n  let sendFlag = false\n  // Error flag, used when errors occur or abort is called\n  let errorFlag = false\n\n  // Binary response (chunk)\n  const responseBinary = []\n\n  // Event listeners\n  const listeners = {}\n\n  /**\n   * Constants\n   */\n\n  this.UNSENT = 0\n  this.OPENED = 1\n  this.HEADERS_RECEIVED = 2\n  this.LOADING = 3\n  this.DONE = 4\n\n  /**\n   * Public vars\n   */\n\n  // Current state\n  this.readyState = this.UNSENT\n\n  // default ready state change handler in case one is not set or is set late\n  this.onreadystatechange = null\n\n  // Result & response\n  this.responseText = ''\n  this.responseXML = ''\n  this.status = null\n  this.statusText = null\n\n  // Whether cross-site Access-Control requests should be made using\n  // credentials such as cookies or authorization headers\n  this.withCredentials = false\n  // \"text\", \"arraybuffer\", \"blob\", or \"document\", depending on your data needs.\n  // Note, setting xhr.responseType = '' (or omitting) will default the response to \"text\".\n  // Omitting, '', or \"text\" will return a String.\n  // Other values will return an ArrayBuffer.\n  this.responseType = ''\n\n  /**\n   * Private methods\n   */\n\n  /**\n   * Check if the specified header is allowed.\n   *\n   * @param header - {string} Header to validate\n   * @return {boolean} - False if not allowed, otherwise true\n   */\n  const isAllowedHttpHeader = function (header) {\n    return disableHeaderCheck || (header && forbiddenRequestHeaders.indexOf(header.toLowerCase()) === -1)\n  }\n\n  /**\n   * Check if the specified method is allowed.\n   *\n   * @param method - {string}  Request method to validate\n   * @return {boolean} - False if not allowed, otherwise true\n   */\n  const isAllowedHttpMethod = function (method) {\n    return (method && forbiddenRequestMethods.indexOf(method) === -1)\n  }\n\n  /**\n   * Public methods\n   */\n\n  /**\n   * Open the connection. Currently supports local server requests.\n   *\n   * @param method - {string} Connection method (eg GET, POST)\n   * @param url - {string} URL for the connection.\n   * @param async - {boolean} Asynchronous connection. Default is true.\n   * @param [user] - {string} Username for basic authentication (optional)\n   * @param [password] - {string} Password for basic authentication (optional)\n   */\n  this.open = function (method, url, async, user, password) {\n    this.abort()\n    errorFlag = false\n\n    // Check for valid request method\n    if (!isAllowedHttpMethod(method)) {\n      throw new Error('SecurityError: Request method not allowed')\n    }\n\n    settings = {\n      method: method,\n      url: url.toString(),\n      async: (typeof async !== 'boolean' ? true : async),\n      user: user || null,\n      password: password || null\n    }\n\n    setState(this.OPENED)\n  }\n\n  /**\n   * Disables or enables isAllowedHttpHeader() check the request. Enabled by default.\n   * This does not conform to the W3C spec.\n   *\n   * @param state - {boolean} Enable or disable header checking.\n   */\n  this.setDisableHeaderCheck = function (state) {\n    disableHeaderCheck = state\n  }\n\n  /**\n   * Sets a header for the request or appends the value if one is already set.\n   *\n   * @param header - {string} Header name\n   * @param value - {string} Header value\n   */\n  this.setRequestHeader = function (header, value) {\n    if (this.readyState !== this.OPENED) {\n      throw new Error('INVALID_STATE_ERR: setRequestHeader can only be called when state is OPEN')\n    }\n    if (!isAllowedHttpHeader(header)) {\n      console.warn('Refused to set unsafe header \"' + header + '\"')\n      return\n    }\n    if (sendFlag) {\n      throw new Error('INVALID_STATE_ERR: send flag is true')\n    }\n    header = headersCase[header.toLowerCase()] || header\n    headersCase[header.toLowerCase()] = header\n    headers[header] = headers[header] ? headers[header] + ', ' + value : value\n  }\n\n  /**\n   * Gets a header from the server response.\n   *\n   * @param header - {string} Name of header to get.\n   * @return {Object} - Text of the header or null if it doesn't exist.\n   */\n  this.getResponseHeader = function (header) {\n    if (typeof header === 'string' &&\n      this.readyState > this.OPENED &&\n      response &&\n      response.headers &&\n      response.headers[header.toLowerCase()] &&\n      !errorFlag\n    ) {\n      return response.headers[header.toLowerCase()]\n    }\n\n    return null\n  }\n\n  /**\n   * Gets all the response headers.\n   *\n   * @return string A string with all response headers separated by CR+LF\n   */\n  this.getAllResponseHeaders = function () {\n    if (this.readyState < this.HEADERS_RECEIVED || errorFlag) {\n      return ''\n    }\n    let result = ''\n\n    for (const i in response.headers) {\n      // Cookie headers are excluded\n      if (i !== 'set-cookie' && i !== 'set-cookie2') {\n        result += i + ': ' + response.headers[i] + '\\r\\n'\n      }\n    }\n    return result.substr(0, result.length - 2)\n  }\n\n  /**\n   * Gets a request header\n   *\n   * @param name - {string} Name of header to get\n   * @return {string} Returns the request header or empty string if not set\n   */\n  this.getRequestHeader = function (name) {\n    if (typeof name === 'string' && headersCase[name.toLowerCase()]) {\n      return headers[headersCase[name.toLowerCase()]]\n    }\n\n    return ''\n  }\n\n  /**\n   * Sends the request to the server.\n   *\n   * @param data - {string} Optional data to send as request body.\n   */\n  this.send = function (data) {\n    if (this.readyState !== this.OPENED) {\n      throw new Error('INVALID_STATE_ERR: connection must be opened before send() is called')\n    }\n\n    if (sendFlag) {\n      throw new Error('INVALID_STATE_ERR: send has already been called')\n    }\n    let ssl = false\n    let local = false\n    const url = new Url.URL(settings.url)\n    let host\n    // Determine the server\n    switch (url.protocol) {\n      case 'https:':\n        ssl = true\n        host = url.hostname\n        break\n      case 'http:':\n        host = url.hostname\n        break\n      case 'file:':\n        local = true\n        break\n      case undefined:\n      case null:\n      case '':\n        host = 'localhost'\n        break\n      default:\n        throw new Error('Protocol not supported.')\n    }\n\n    // Load files off the local filesystem (file://)\n    if (local) {\n      if (settings.method !== 'GET') {\n        throw new Error('XMLHttpRequest: Only GET method is supported')\n      }\n      if (settings.async) {\n        fs.readFile(url, 'utf8', function (error, data) {\n          if (error) {\n            self.handleError(error, url)\n          } else {\n            self.status = 200\n            self.responseText = data\n            setState(self.DONE)\n          }\n        })\n      } else {\n        try {\n          this.responseText = fs.readFileSync(url, 'utf8')\n          this.status = 200\n          setState(self.DONE)\n        } catch (e) {\n          this.handleError(e, url)\n        }\n      }\n\n      return\n    }\n\n    // Default to port 80. If accessing localhost on another port be sure\n    // to use http://localhost:port/path\n    const port = url.port || (ssl ? 443 : 80)\n    // Add query string if one is used\n    const uri = url.pathname + (url.search ? url.search : '')\n\n    // Set the defaults if they haven't been set\n    for (const name in defaultHeaders) {\n      if (!headersCase[name.toLowerCase()]) {\n        headers[name] = defaultHeaders[name]\n      }\n    }\n\n    // Set the Host header or the server may reject the request\n    headers.Host = host\n    // IPv6 addresses must be escaped with brackets\n    if (url.host[0] === '[') {\n      headers.Host = '[' + headers.Host + ']'\n    }\n    if (!((ssl && port === 443) || port === 80)) {\n      headers.Host += ':' + url.port\n    }\n\n    // Set Basic Auth if necessary\n    if (settings.user) {\n      if (typeof settings.password === 'undefined') {\n        settings.password = ''\n      }\n      const authBuf = Buffer.from(settings.user + ':' + settings.password)\n      headers.Authorization = 'Basic ' + authBuf.toString('base64')\n    }\n\n    // Set content length header\n    if (settings.method === 'GET' || settings.method === 'HEAD') {\n      data = null\n    } else if (data) {\n      headers['Content-Length'] = Buffer.isBuffer(data) ? data.length : Buffer.byteLength(data)\n\n      if (!this.getRequestHeader('Content-Type')) {\n        headers['Content-Type'] = 'text/plain;charset=UTF-8'\n      }\n    } else if (settings.method === 'POST') {\n      // For a post with no data set Content-Length: 0.\n      // This is required by buggy servers that don't meet the specs.\n      headers['Content-Length'] = 0\n    }\n\n    const options = {\n      host: host,\n      port: port,\n      path: uri,\n      method: settings.method,\n      headers: headers,\n      agent: false,\n      withCredentials: self.withCredentials\n    }\n\n    const responseType = this.responseType || 'text'\n\n    // Reset error flag\n    errorFlag = false\n\n    // Handle async requests\n    if (settings.async) {\n      // Use the proper protocol\n      const doRequest = ssl ? https.request : http.request\n\n      // Request is being sent, set send flag\n      sendFlag = true\n\n      // As per spec, this is called here for historical reasons.\n      self.dispatchEvent('readystatechange')\n\n      // Handler for the response\n      const responseHandler = function responseHandler (resp) {\n        // Set response var to the response we got back\n        // This is so it remains accessable outside this scope\n        response = resp\n        // Check for redirect\n        // @TODO Prevent looped redirects\n        if (response.statusCode === 301 || response.statusCode === 302 || response.statusCode === 303 || response.statusCode === 307) {\n          // Change URL to the redirect location\n          settings.url = response.headers.location\n          const url = new Url.URL(settings.url)\n          // Set host var in case it's used later\n          host = url.hostname\n          // Options for the new request\n          const newOptions = {\n            hostname: url.hostname,\n            port: url.port,\n            path: url.path,\n            method: response.statusCode === 303 ? 'GET' : settings.method,\n            headers: headers,\n            withCredentials: self.withCredentials\n          }\n\n          // Issue the new request\n          request = doRequest(newOptions, responseHandler).on('error', errorHandler)\n          request.end()\n          // @TODO Check if an XHR event needs to be fired here\n          return\n        }\n\n        const encoding = responseType === 'text' ? 'utf8' : 'binary'\n        if (encoding === 'utf8') {\n          response.setEncoding('utf8')\n        }\n\n        setState(self.HEADERS_RECEIVED)\n        self.status = response.statusCode\n\n        if (encoding === 'utf8') {\n          response.on('data', function (chunk) {\n            // Make sure there's some data\n            if (chunk) {\n              self.responseText += chunk\n            }\n            // Don't emit state changes if the connection has been aborted.\n            if (sendFlag) {\n              setState(self.LOADING)\n            }\n          })\n\n          response.on('end', function () {\n            if (sendFlag) {\n              // Discard the end event if the connection has been aborted\n              setState(self.DONE)\n              sendFlag = false\n            }\n          })\n        } else {\n          response.on('data', function (chunk) {\n            // Make sure there's some data\n            if (chunk) {\n              responseBinary.push(chunk)\n            }\n            // Don't emit state changes if the connection has been aborted.\n            if (sendFlag) {\n              setState(self.LOADING)\n            }\n          })\n\n          response.on('end', function () {\n            // buffers are Uint8Array instances\n            self.response = Buffer.concat(responseBinary).buffer\n            if (sendFlag) {\n              // Discard the end event if the connection has been aborted\n              setState(self.DONE)\n              sendFlag = false\n            }\n          })\n        }\n\n        response.on('error', function (error) {\n          self.handleError(error, url)\n        })\n      }\n\n      // Error handler for the request\n      const errorHandler = function errorHandler (error) {\n        self.handleError(error, url)\n      }\n\n      // Create the request\n      request = doRequest(options, responseHandler).on('error', errorHandler)\n\n      // Node 0.4 and later won't accept empty data. Make sure it's needed.\n      if (data) {\n        request.write(data)\n      }\n\n      request.end()\n\n      self.dispatchEvent('loadstart')\n    } else { // Synchronous\n      const maxBuffer = process.env.UNXHR_MAX_BUFFER\n        ? parseInt(process.env.UNXHR_MAX_BUFFER)\n        : DEFAULT_MAX_BUFFER\n      const encoding = responseType === 'text' ? 'utf8' : 'binary'\n      const scriptPath = ospath.join(__dirname, 'request.js')\n      const output = (__webpack_require__(/*! child_process */ \"child_process\").execSync)(`\"${process.execPath}\" \"${scriptPath}\" \\\n--ssl=\"${ssl}\" \\\n--encoding=\"${encoding}\" \\\n--request-options=${JSON.stringify(JSON.stringify(options))}`, { stdio: ['pipe', 'pipe', 'pipe'], input: data, maxBuffer: maxBuffer })\n      const result = JSON.parse(output.toString('utf8'))\n      if (result.error) {\n        throw translateError(result.error, url)\n      } else {\n        response = result.data\n        self.status = result.data.statusCode\n        if (encoding === 'binary') {\n          self.response = Uint8Array.from(result.data.binary.data).buffer\n        } else {\n          self.responseText = result.data.text\n        }\n        setState(self.DONE)\n      }\n    }\n  }\n\n  /**\n   * Called when an error is encountered to deal with it.\n   */\n  this.handleError = function (error, url) {\n    this.status = 0\n    this.statusText = ''\n    this.responseText = ''\n    errorFlag = true\n    setState(this.DONE)\n    this.dispatchEvent('error', { error: translateError(error, url) })\n  }\n\n  /**\n   * Aborts a request.\n   */\n  this.abort = function () {\n    if (request) {\n      request.abort()\n      request = null\n    }\n\n    headers = defaultHeaders\n    this.status = 0\n    this.responseText = ''\n    this.responseXML = ''\n\n    errorFlag = true\n\n    if (this.readyState !== this.UNSENT &&\n      (this.readyState !== this.OPENED || sendFlag) &&\n      this.readyState !== this.DONE) {\n      sendFlag = false\n      setState(this.DONE)\n    }\n    this.readyState = this.UNSENT\n    this.dispatchEvent('abort')\n  }\n\n  /**\n   * Adds an event listener. Preferred method of binding to events.\n   */\n  this.addEventListener = function (event, callback) {\n    if (!(event in listeners)) {\n      listeners[event] = []\n    }\n    // Currently allows duplicate callbacks. Should it?\n    listeners[event].push(callback)\n  }\n\n  /**\n   * Remove an event callback that has already been bound.\n   * Only works on the matching funciton, cannot be a copy.\n   */\n  this.removeEventListener = function (event, callback) {\n    if (event in listeners) {\n      // Filter will return a new array with the callback removed\n      listeners[event] = listeners[event].filter(function (ev) {\n        return ev !== callback\n      })\n    }\n  }\n\n  /**\n   * Dispatch any events, including both \"on\" methods and events attached using addEventListener.\n   */\n  this.dispatchEvent = function (event, args) {\n    if (typeof self['on' + event] === 'function') {\n      self['on' + event](args)\n    }\n    if (event in listeners) {\n      for (let i = 0, len = listeners[event].length; i < len; i++) {\n        listeners[event][i].call(self, args)\n      }\n    }\n  }\n\n  /**\n   * Changes readyState and calls onreadystatechange.\n   *\n   * @param state - {Number} New state\n   */\n  const setState = function (state) {\n    if (state === self.LOADING || self.readyState !== state) {\n      self.readyState = state\n\n      if (settings.async || self.readyState < self.OPENED || self.readyState === self.DONE) {\n        self.dispatchEvent('readystatechange')\n      }\n\n      if (self.readyState === self.DONE && !errorFlag) {\n        self.dispatchEvent('load')\n        // @TODO figure out InspectorInstrumentation::didLoadXHR(cookie)\n        self.dispatchEvent('loadend')\n      }\n    }\n  }\n\n  const translateError = function (error, url) {\n    if (typeof error === 'object') {\n      if (error.code === 'ENOTFOUND' || error.code === 'EAI_AGAIN') {\n        // XMLHttpRequest throws a DOMException when DNS lookup fails:\n        // code: 19\n        // message: \"Failed to execute 'send' on 'XMLHttpRequest': Failed to load 'http://url/'.\"\n        // name: \"NetworkError\"\n        // stack: (...)\n        return new Error(`Failed to execute 'send' on 'XMLHttpRequest': Failed to load '${url}'.`)\n      }\n      if (error instanceof Error) {\n        return error\n      }\n      return new Error(JSON.stringify(error))\n    }\n    return new Error(error)\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/unxhr/lib/XMLHttpRequest.js\n");

/***/ })

};
;